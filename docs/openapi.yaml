openapi: 3.1.0
info:
  title: Portfolio Manager API
  version: '1.0.0'
  description: Cash and benchmark endpoints behind the `features.cash_benchmarks` flag.
servers:
  - url: http://localhost:3000
paths:
  /api/returns/daily:
    get:
      summary: Daily time-weighted returns
      parameters:
        - in: query
          name: from
          schema:
            type: string
            format: date
        - in: query
          name: to
          schema:
            type: string
            format: date
        - in: query
          name: views
          schema:
            type: string
          description: Comma separated list of views (port, excash, spy, bench)
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number (1-indexed)
        - in: query
          name: per_page
          schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 100
          description: Page size (max 500)
      responses:
        '200':
          description: Daily return series
          content:
            application/json:
              schema:
                type: object
                properties:
                  series:
                    type: object
                    properties:
                      r_port:
                        $ref: '#/components/schemas/DateValueSeries'
                      r_ex_cash:
                        $ref: '#/components/schemas/DateValueSeries'
                      r_spy_100:
                        $ref: '#/components/schemas/DateValueSeries'
                      r_bench_blended:
                        $ref: '#/components/schemas/DateValueSeries'
                      r_cash:
                        $ref: '#/components/schemas/DateValueSeries'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
          headers:
            ETag:
              schema:
                type: string
              description: Strong validator for conditional requests
  /api/nav/daily:
    get:
      summary: Daily NAV snapshots and sleeve weights
      parameters:
        - in: query
          name: from
          schema:
            type: string
            format: date
        - in: query
          name: to
          schema:
            type: string
            format: date
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number (1-indexed)
        - in: query
          name: per_page
          schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 100
          description: Page size (max 500)
      responses:
        '200':
          description: NAV series
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                          format: date
                        portfolio_nav:
                          type: number
                        ex_cash_nav:
                          type: number
                        cash_balance:
                          type: number
                        risk_assets_value:
                          type: number
                        stale_price:
                          type: boolean
                        weights:
                          type: object
                          properties:
                            cash:
                              type: number
                            risk:
                              type: number
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
          headers:
            ETag:
              schema:
                type: string
              description: Strong validator for conditional requests
  /api/prices/{symbol}:
    get:
      summary: Historical adjusted-close prices for a symbol
      parameters:
        - in: path
          name: symbol
          required: true
          schema:
            type: string
        - in: query
          name: range
          schema:
            type: string
            enum: [1y]
          description: Historical window (currently only `1y` is supported)
      responses:
        '200':
          description: Historical price series
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - date
                    - close
                  properties:
                    date:
                      type: string
                      format: date
                    close:
                      type: number
          headers:
            ETag:
              schema:
                type: string
              description: Strong validator for conditional requests
  /api/benchmarks/summary:
    get:
      summary: Cumulative returns and drag metrics
      parameters:
        - in: query
          name: from
          schema:
            type: string
            format: date
        - in: query
          name: to
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Summary totals
          content:
            application/json:
              schema:
                type: object
                properties:
                  summary:
                    $ref: '#/components/schemas/ReturnSummary'
                  drag:
                    type: object
                    properties:
                      vs_self:
                        type: number
                      allocation:
                        type: number
                  money_weighted:
                    type: object
                    properties:
                      portfolio:
                        type: number
                      start_date:
                        type: string
                        format: date
                        nullable: true
                      end_date:
                        type: string
                        format: date
                        nullable: true
                      method:
                        type: string
                        enum:
                          - xirr
                    required:
                      - portfolio
                      - method
  /api/portfolio/{id}:
    get:
      summary: Load a persisted portfolio definition
      parameters:
        - $ref: '#/components/parameters/PortfolioId'
        - $ref: '#/components/parameters/PortfolioKey'
      responses:
        '200':
          description: Portfolio payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioPayload'
        '401':
          description: Missing portfolio API key header
        '403':
          description: Invalid portfolio API key header
        '404':
          description: Portfolio not provisioned
    post:
      summary: Persist a portfolio definition
      parameters:
        - $ref: '#/components/parameters/PortfolioId'
        - $ref: '#/components/parameters/PortfolioKey'
        - $ref: '#/components/parameters/PortfolioKeyNew'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioPayload'
      responses:
        '200':
          description: Persistence acknowledgement
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '400':
          description: Validation failure
        '401':
          description: Missing portfolio API key header
        '403':
          description: Invalid portfolio API key header
  /api/admin/cash-rate:
    post:
      summary: Upsert a cash APY effective date
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [effective_date, apy]
              properties:
                effective_date:
                  type: string
                  format: date
                apy:
                  type: number
      responses:
        '200':
          description: Upsert acknowledgement
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
components:
  securitySchemes:
    PortfolioKey:
      type: apiKey
      in: header
      name: X-Portfolio-Key
  parameters:
    PortfolioId:
      in: path
      name: id
      required: true
      schema:
        type: string
      description: Portfolio identifier matching `[A-Za-z0-9_-]{1,64}`
    PortfolioKey:
      in: header
      name: X-Portfolio-Key
      required: true
      schema:
        type: string
      description: Per-portfolio API key used to authorise requests
    PortfolioKeyNew:
      in: header
      name: X-Portfolio-Key-New
      required: false
      schema:
        type: string
      description: Optional new portfolio API key to rotate during a save
  schemas:
    DateValueSeries:
      type: array
      items:
        type: object
        properties:
          date:
            type: string
            format: date
          value:
            type: number
    PaginationMeta:
      type: object
      properties:
        page:
          type: integer
        per_page:
          type: integer
        total:
          type: integer
        total_pages:
          type: integer
    ReturnSummary:
      type: object
      properties:
        r_port:
          type: number
        r_ex_cash:
          type: number
        r_bench_blended:
          type: number
        r_spy_100:
          type: number
        r_cash:
          type: number
    PortfolioTransaction:
      type: object
      properties:
        uid:
          type: string
        date:
          type: string
          format: date
        ticker:
          type: string
        type:
          type: string
          description: Transaction type (BUY, SELL, DIVIDEND, etc.)
        amount:
          type: number
        price:
          type: number
        shares:
          type: number
        quantity:
          type: number
        metadata:
          type: object
          additionalProperties: true
    PortfolioPayload:
      type: object
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/PortfolioTransaction'
        signals:
          type: object
          additionalProperties:
            type: object
            properties:
              pct:
                type: number
        settings:
          type: object
          properties:
            autoClip:
              type: boolean
